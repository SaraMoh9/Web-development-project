Statement Problem: Employee Management System
You are tasked with developing an Employee Management System (EMS) using Dart programming language.
The EMS should allow users to add, view, update, and delete employee records.
Each employee record should contain the following information:

•	Employee ID (unique identifier)
•	Name
•	Department
•	Position
•	Salary

Your program should provide methods to perform the following operations:

1.	Write your program using Dart class notion.
2.	The system can create empty object using default constructor. Also can create objects with default values (use any suitable constructor).
3.	Adding Employee: the employee's information (ID, name, department, position, salary) and add the employee to the system (use a set method). 
4.	View Employee: Display an employee data (use a get method).

Your task is to write a Dart program that implements the Employee Management System according to the specifications provided above. 

1.	Pay close attention to class and variable initialization, ensuring that all variables are properly initialized and utilized throughout the program. 
2.	Use the constructors to create 4 objects (in the main function). 
3.	Use the objects to add and display employees details.

Submission Guidelines:
•	Write a Dart program implementing the Employee Management System.
•	Include comments and documentation to explain the purpose of each class, method, and variable in your program.
•	Test your program thoroughly to ensure that it functions correctly and produces the expected output under various scenarios.

sol:

class Employee {
  late int id;
  late String name;
  late String department;
  late String position;
  late double salary;

  // Default constructor
  Employee() {
    id = 0;
    name = '';
    department = '';
    position = '';
    salary = 0.0;
  }

  // Constructor with parameters
  Employee.withDetails(int id, String name, String department, String position, double salary) {
    this.id = id;
    this.name = name;
    this.department = department;
    this.position = position;
    this.salary = salary;
  }

  // Set method to add employee
  void addEmployee(int id, String name, String department, String position, double salary) {
    this.id = id;
    this.name = name;
    this.department = department;
    this.position = position;
    this.salary = salary;
  }

  // Get method to view employee
  void viewEmployee() {
    print('Employee ID: $id');
    print('Name: $name');
    print('Department: $department');
    print('Position: $position');
    print('Salary: $salary');
  }
}

void main() {
  // Create objects using constructors
  var employee1 = Employee();
  var employee2 = Employee.withDetails(1, 'John Doe', 'IT', 'Software Developer', 5000.0);
  var employee3 = Employee.withDetails(2, 'Jane Smith', 'HR', 'HR Manager', 6000.0);
  var employee4 = Employee.withDetails(3, 'Mike Johnson', 'Finance', 'Financial Analyst', 5500.0);

  // Add and display employees details
  employee1.addEmployee(0, 'Mark Anderson', 'Marketing', 'Marketing Manager', 5500.0);
  employee1.viewEmployee();
  print('');
  employee2.viewEmployee();
  print('');
  employee3.viewEmployee();
  print('');
  employee4.viewEmployee();
}
